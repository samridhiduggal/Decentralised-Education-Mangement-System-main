import type UAuth from '@uauth/js';
import type { UAuthConstructorOptions } from '@uauth/js';
import { Actions, Connector, Provider } from '@web3-react/types';
export interface UAuthConnectors {
    injected: Connector;
    walletconnect: Connector;
}
declare type UAuthConnectorOptions = UAuthConstructorOptions & {
    uauth?: UAuth;
    connectors: UAuthConnectors;
    shouldLoginWithRedirect?: boolean;
};
export interface UAuthConnectorConstructorArgs {
    actions: Actions;
    options: UAuthConnectorOptions;
    onError?: (error: Error) => void;
}
declare type MetaMaskProvider = Provider & {
    isMetaMask?: boolean;
    isConnected?: () => boolean;
    providers?: MetaMaskProvider[];
};
export interface ConnectorLoginCallbackOptions {
    url?: string;
    activate: (connector: Connector, onError?: (error: Error) => void, throwErrors?: boolean) => Promise<void>;
    onError?: (error: Error) => void;
    throwErrors?: boolean;
}
export declare function parseChainId(chainId: string): number;
declare class UAuthConnector extends Connector {
    provider?: MetaMaskProvider;
    private options;
    private _subConnector?;
    private _uauth?;
    private eagerConnection?;
    static UAuth: typeof UAuth;
    static registerUAuth(pkg: typeof UAuth): void;
    static importUAuth(): Promise<void>;
    constructor({ actions, options, onError }: UAuthConnectorConstructorArgs);
    callbackAndActivate<T>(options: ConnectorLoginCallbackOptions): Promise<void>;
    activate(): Promise<void>;
    deactivate(): void;
    isAuthorized(): Promise<boolean>;
    getProvider(): Provider | undefined;
    get uauth(): UAuth;
    get subConnector(): Connector & {
        isAuthorized?(): Promise<boolean>;
    };
}
export default UAuthConnector;
