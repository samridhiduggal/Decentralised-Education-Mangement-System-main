"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseChainId = void 0;
const types_1 = require("@web3-react/types");
const version_1 = require("./version");
if (typeof window !== 'undefined') {
    const _w = window;
    _w.UAUTH_VERSION = _w.UAUTH_VERSION || {};
    _w.UAUTH_VERSION.WEB3_REACT = version_1.VERSION;
}
function parseChainId(chainId) {
    return Number.parseInt(chainId, 16);
}
exports.parseChainId = parseChainId;
class UAuthConnector extends types_1.Connector {
    constructor({ actions, options, onError }) {
        super(actions, onError);
        this.options = options;
    }
    static registerUAuth(pkg) {
        UAuthConnector.UAuth = pkg;
    }
    static importUAuth() {
        return __awaiter(this, void 0, void 0, function* () {
            if (UAuthConnector.UAuth == null) {
                UAuthConnector.UAuth = (yield Promise.resolve().then(() => require('@uauth/js')).then(m => { var _a; return (_a = m === null || m === void 0 ? void 0 : m.default) !== null && _a !== void 0 ? _a : m; }));
            }
        });
    }
    callbackAndActivate(options) {
        return __awaiter(this, void 0, void 0, function* () {
            yield UAuthConnector.importUAuth();
            const { activate, onError, throwErrors } = options, callbackOptions = __rest(options, ["activate", "onError", "throwErrors"]);
            if (callbackOptions.url) {
                yield this.uauth.loginCallback(callbackOptions);
            }
            else {
                yield this.uauth.loginCallback();
            }
            return activate(this, onError, throwErrors);
        });
    }
    activate() {
        return __awaiter(this, void 0, void 0, function* () {
            const cancelActivation = this.actions.startActivation();
            yield UAuthConnector.importUAuth();
            let user;
            try {
                user = yield this.uauth.user();
            }
            catch (error) {
                if (!this.uauth.fallbackLoginOptions.scope.includes('wallet')) {
                    throw new Error('Must request the "wallet" scope for connector to work.');
                }
                if (this.options.shouldLoginWithRedirect) {
                    yield this.uauth.login({
                        packageName: '@uauth/web3-react',
                        packageVersion: version_1.VERSION,
                    });
                    // NOTE: We don't want to throw because the page will take some time to
                    // load the redirect page.
                    // eslint-disable-next-line @typescript-eslint/no-empty-function
                    yield new Promise(() => { });
                    // We need to throw here otherwise typescript won't know that user isn't null.
                    throw new Error('Should never get here.');
                }
                else {
                    yield this.uauth.loginWithPopup({
                        packageName: '@uauth/web3-react',
                        packageVersion: version_1.VERSION,
                    });
                    user = yield this.uauth.user();
                }
            }
            if (user.wallet_type_hint == null) {
                throw new Error('no wallet type present');
            }
            if (['web3', 'injected'].includes(user.wallet_type_hint)) {
                this._subConnector = this.options.connectors.injected;
            }
            else if (user.wallet_type_hint === 'walletconnect') {
                this._subConnector = this.options.connectors.walletconnect;
            }
            else {
                throw new Error('Connector not supported');
            }
            yield this._subConnector.activate();
            if (this._subConnector.provider) {
                this.provider = this._subConnector.provider;
            }
            if (!this.provider)
                return cancelActivation();
            return Promise.all([
                this.provider.request({ method: 'eth_chainId' }),
                this.provider.request({ method: 'eth_requestAccounts' }),
            ])
                .then(([chainId, accounts]) => {
                const receivedChainId = parseChainId(chainId);
                return this.actions.update({ chainId: receivedChainId, accounts });
            })
                .catch(error => {
                cancelActivation === null || cancelActivation === void 0 ? void 0 : cancelActivation();
                throw error;
            });
        });
    }
    deactivate() {
        if (this._subConnector) {
            if (!this.uauth.fallbackLogoutOptions.rpInitiatedLogout) {
                this.uauth.logout({ rpInitiatedLogout: false });
            }
            ;
            this === null || this === void 0 ? void 0 : this._subConnector.deactivate();
        }
    }
    isAuthorized() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const user = yield this.uauth.user();
            return Boolean(user && ((_a = this._subConnector) === null || _a === void 0 ? void 0 : _a.provider));
        });
    }
    getProvider() {
        var _a;
        return (_a = this.subConnector) === null || _a === void 0 ? void 0 : _a.provider;
    }
    get uauth() {
        const _a = this.options, { connectors, uauth, shouldLoginWithRedirect } = _a, uauthOptions = __rest(_a, ["connectors", "uauth", "shouldLoginWithRedirect"]);
        if (uauth) {
            return uauth;
        }
        if (this._uauth) {
            return this._uauth;
        }
        if (UAuthConnector.UAuth == null) {
            throw new Error('Must import UAuth before constructing a UAuth Object');
        }
        if (!uauthOptions.clientID || !uauthOptions.redirectUri) {
            throw new Error('Incomplete constructor options');
        }
        this._uauth = new UAuthConnector.UAuth(uauthOptions);
        return this._uauth;
    }
    get subConnector() {
        if (this._subConnector == null) {
            throw new Error('no subconnector');
        }
        return this._subConnector;
    }
}
exports.default = UAuthConnector;
